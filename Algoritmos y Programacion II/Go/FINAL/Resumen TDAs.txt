Cola:

	type nodoCola[T any] struct {
		dato T
		prox *nodoCola[T]
	}

	type colaEnlazada[T any] struct {
		primero *nodoCola[T]
		ultimo  *nodoCola[T]
	}


Pila Dinamica:

	type pilaDinamica[T any] struct {
		datos    []T
		cantidad int
	}

	func CrearPilaDinamica[T any]() Pila[T] {
		pila := new(pilaDinamica[T])
		pila.datos, pila.cantidad = make([]T, 10), 0
		return pila
	}


Lista Enlazada:

	type nodoLista[T any] struct {
		dato T
		prox *nodoLista[T]
	}

	type listaEnlazada[T any] struct {
		primero *nodoLista[T]
		ultimo  *nodoLista[T]
		largo   int
	}

	type iteradorLista[T any] struct {
		actual   *nodoLista[T]
		anterior *nodoLista[T]
		l        *listaEnlazada[T]
	}

	func (lista *listaEnlazada[T]) Iterador() IteradorLista[T] {
		nuevoIter := new(iteradorLista[T])
		nuevoIter.l = lista
		nuevoIter.actual = lista.primero
		return nuevoIter
	}


Diccionario Hash:

	- Cerrado:

	type estadoParClaveDato int

	const (
		VACIO = estadoParClaveDato(iota)
		BORRADO
		OCUPADO
	)

	type celdaHash[K comparable, V any] struct {
		clave  K
		dato   V
		estado estadoParClaveDato
	}

	type hashCerrado[K comparable, V any] struct {
		tabla    []celdaHash[K, V]
		cantidad int
		tam      int
		borrados int
	}


	- Abierto:

	type parClaveValor[K comparable, V any] struct {
		clave K
		dato  V
	}

	type hashAbierto[K comparable, V any] struct {
		tabla    []Lista[parClaveValor[K, V]]
		tam      int
		cantidad int
	}


Diccionario ABB:

	type funcCmp[K comparable] func(K, K) int

	type nodoAbb[K comparable, V any] struct {
		izquierdo *nodoAbb[K, V]
		derecho   *nodoAbb[K, V]
		clave     K
		dato      V
	}

	type abb[K comparable, V any] struct {
		raiz     *nodoAbb[K, V]
		cantidad int
		cmp      funcCmp[K]
	}

	type iterExterno[K comparable, V any] struct {
		anteriores pila.Pila[*nodoAbb[K, V]]
		actual     *nodoAbb[K, V]
	}


Cola de Prioridad Heap:

	type heap[T comparable] struct {
		arr      []T
		cantidad int
		funcCmp  func(T, T) int
	}

	func HeapSort[T comparable](elementos []T, funcionCmp func(T, T) int) {
		heapify(elementos, funcionCmp)
		cantidad := len(elementos)
		for i := len(elementos) - 1; i >= 0; i-- {
			cantidad--
			swap(elementos, 0, i)
			downHeap(cantidad, 0, elementos, funcionCmp)
		}
	}

	func heapify[T comparable](arr []T, funcionCmp func(T, T) int) {
		for i := (len(arr) - 1) / 2; i >= 0; i-- {
			downHeap(len(arr), i, arr, funcionCmp)
		}
	}